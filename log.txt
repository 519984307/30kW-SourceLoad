2022/10/1:
目前设计的一些注意点：

1、QToolButton的trigger信号是在关联的动作触发后才发射，这样tool.cpp关联triggered信号是不对的
会发现点击按钮没有反应，但是点击菜单有反应，因为菜单直接调用了动作，触发了action的triggered信号
紧接着又会触发toolbutton的triggered信号，所以切记不能递归调用
后来查到QToolButton的父类也就是QAbstractButton是有clicked信号，可以用，所以绑定了clicked信号
在clicked信号的槽函数下是可以直接调用action触发的
void MainWindow::on_SystemSettingsTbn()
{
    SystemSettingsAct->trigger(); //事先不关联动作,使用手动的方式触发动作
}

为啥要这么麻烦，因为QToolButton实际上点击时会弹出菜单，考虑到用户的感觉，对于主界面的9个按钮
最好就像QPushButton那样点击一下就调用功能，而不是弹出菜单还要选择，并且QToolButton如果只关联了1个QAction
就没必要使用菜单的模式，但是又想用到QToolButton的setAutoRaise(true)功能，所以没使用QPushButton
这样的话为了产生QPushButton的使用效果，就在create.cpp中的createToolButtons()函数禁用下拉菜单样式
同时菜单模式除了About以外都注释掉，因为没有菜单也就没必要设置
setStyleSheet("QToolButton::menu-indicator{image:none;}");
setPopupMode(QToolButton::InstantPopup);
------------------------------------------------------------------------------------------------------------------------------------------------------------

2. 主窗口-子窗口-堆叠窗口的数据传递

(2.1) 前向传递
主窗口有私有属性来保存子窗口设置的参数 (可以在setting.cpp的on_BasicSettingsAct()函数中的(ret == QDialog::Accepted)判断后更新数据,也可以借助槽函数on_basicSettings响应)
             <-----子窗口的公共函数settings()和槽机制basicSettings()均可以传递数据(在点击确定按钮时更新和发送数据)
                                <-----同理堆叠窗口依靠组件的信号绑定槽函数来更新设置的信息mSettings

因为子窗口和堆叠窗口定义的struct都是聚合类型，所以默认的operator=函数已足够无需重定义
同时为了避免未初始化问题在堆叠窗口的struct类型定义了默认构造函数，而子窗口的struct因为会自动调用堆叠窗口的构造函数所以不用再定义默认构造

现在因为子窗口并不是一直驻留后台，即不是全局的子窗口指针，而是在setting.cpp的on_BasicSettingsAct()中new出来
这样原来用户设置的参数就会丢失，例如用户设置完以后再次打开设置串口应当是保留上次状态的，所以必须有一个主窗口到子窗口再到堆叠窗口的数据传递过程

如果是首次启动主界面，那么主窗口保存的数据必然是不能未经初始化就传递给子窗口的
这也是为何在上边提到提供堆叠窗口的struct的一个默认构造防止出现问题，默认都是0参数和CV工作模式，这样传递不会出现问题

(2.2) 反向传递
反向传递的时候就需要子窗口和堆叠窗口都提供一个函数为setSettings()

主窗口的数据mainwindow::mSettings ------> on_BasicSettingsAct()函数中new出一个子窗口的dialog后(先经过构造函数,内部的mCommonSettings是个全新的默认设置)，然后调用dialog->setSettings()
                -------->   dialog->setSettings()就将数据传递给了子窗口，子窗口的mCommonSettings还是默认设置，故在dialog->setSettings内调用mCommonSettings->setSettings()更新数据
                                ------> mCommonSettings->setSettings()同理把数据给了堆叠窗口，在该函数内部把数据更新
------------------------------------------------------------------------------------------------------------------------------------------------------------

3. 监控界面 - 通讯界面 - 串口固定查询线程、串口设定查询线程的数据传递

(3.1) 前向传递
(3.1.1) 监控界面信号=>mainwindow_connect.cpp完成绑定=>通讯界面槽函数
监控界面的组件(spinbox)值改变时触发对应的槽函数，在槽函数内拿到当前的值只做1个转 /发信号的处理
一共10个信号,这些信号会与通讯界面的对应槽函数绑定，那么通讯界面就拿到了这些值再进一步传递给串口设定查询线程
信号和槽的绑定在mainwindow_connect.cpp中的函数void MainWindow::initMonitorToCommunicationConnections()完成
因为主窗口才同时有监控界面和通讯界面的全局指针mainMonitor和mianCommunication，这样可以完成绑定
void powSourceChanged(QByteArray value);
void powLoadChanged(QByteArray value);
void resSourceChanged(QByteArray value);
void resLoadChanged(QByteArray value);
void voltChanged(QByteArray value);
void currSourceChanged(QByteArray value);
void currLoadChanged(QByteArray value);
void currChanged(QByteArray value);
void voltSourceChanged(QByteArray value);
void voltLoadChanged(QByteArray value);
通讯界面的communication_slot_from_monitor.cpp定义了和这10个信号绑定的槽函数
(3.1.2) 通讯界面信号 => communication_connect.cpp => 固定查询线程槽函数
void sendInfo(SETTINGVARIABLE role,QByteArray request);
在communication_slot_from_monitor.cpp中使用,通讯界面=>设定查询告知设定的角色和要设定的值
serial_fixedquery_thread.cpp的void SerialFixedQueryThread::on_SendInfo(SETTINGVARIABLE role,QByteArray request)响应
然后固定查询线程会读取数据，如果数据不包含分号就说明是设定查询的回复，那么就把数据、发送的角色一起发出去，交给反向传递流程
如果数据包含分号，说明是固定查询的回复，同样直接转发交给反向传递流程，但是不需要指定角色

(3.2) 反向传递
(3.2.1) 固定查询线程 => 通讯界面
反向传递在设定查询线程没有任何信号，因为串口资源只有1个，且在固定查询线程使用
所以固定查询依据收到的数据是否包含分号来传递2种信号，同时还有超时、串口错误等信号
之后就是在communication_slot_from_fixedquery.cpp处理这些来自固定查询线程的信号
(3.2.2) 通讯界面 => 监控界面
通讯界面只是做一些必要的处理，主要还是作转发工作，定义了同名信号转发
void availableFixedQueryData(const QList<QByteArray> & values); //  固定查询-数据VAPR =>监控界面
void errorCode(TIMEOUTCODE code); // 固定查询-超时错误 =>监控界面
void errorCode(SERIALERROR code); // 固定查询-串口错误 =>监控界面
void errorCode(bool failed,SETTINGVARIABLE role) ; // 设定查询-设定成功或失败 =>监控界面
然后在监控界面有对应的槽函数响应上述4个信号，信号和槽函数的连接在mainwindow_connect.cpp内完成


2022/12/14：
1. communication修改了主布局，使用QGroupBox更美观，同时统一变量命名规范，usb/tcp对称
2. mainwindow 去除了工作模式、监控界面，以及对应的菜单功能，这些不是主窗口应该具有的功能
3. 工作模式功能改作为主窗口的基本设置功能的子功能的一部分
4. 监控界面移入communication的子功能，这样可以直接互相传递信息，无需借助主窗口之手
5. 修改工作模式窗口的主布局
6. 小改动，去除监控界面的1个信号
7. 修复tablesuzedialog工作模式切换但是字段的enabled没有切换的bug
8. 修复setting堆叠界面不能随项变化的bug
9. 完全重构Usb线程的写法，原来的写法是继承QThread重载run函数，内部依靠互斥量和线程唤醒机制来控制，实现完全没有问题。
不过写法上比较复杂，而且run函数要完成所有的工作不够灵活，使用继承QObject作为工作对象提供各种函数实现然后将其moveToThread的写法更高效更灵活
之前tcp线程就是用这种方法，现在下定决心保持一致，进行了完全重构，并更改命名规范
10. 合并tcp/usb到communication内，增加不扩散套接字错误到监控界面的错误处理机制，和usb保持一致
11. 删除tcp线程不必要的错误码，并删除monitor翻译错误码的相关代码和core/enum中的枚举值，总之让tcp/usb基本完全统一工作流程，
包括各种函数的命名变量的命名，利于维护
12. 进一步抽象出工作流程，Query作为TcpQuery/UsbQuery的抽象基类，完善功能
13. usbconfig的命名规范修改，合并几个源文件
14. enum的命名规范修改
15. spic命令面板终端功能的初步实现

其它：完善各种信号-槽连接的细节，去除不必要的变量；更新翻译


2022/12/15:
① 迁徙日志周期设置的功能到settings，而非表格的一个子功能，符合用户习惯
② 继续计划把日志保存字段设置的功能从表格功能剥离出来，同时思考如何保存用户设定的值和反馈值，之前只支持保存固定查询的VAPR4个数据


2022/12/19：
① 改造15号的②，首先要解决的问题如何区分出IO设备收到的数据，日志问题先搁置，也就是data_processing的处理程序要改写。
	1. 返回的数据都是以\n作为一条完整的语句,如果包含;说明是固定查询的数据返回实时测量的VAPR4个值，处理去掉;后变成列表用1个信号发出去
	2. 不包含;的回复，可能是设定查询的回复，也可能是terminal的回复。设定查询要先写入设定命令，所以要知道2个值，一个是设定的role是谁，
	   一个是要设定的大小value是多大，这2个值是用户在monitor界面设置后同步发给communication的QueryWorker对象，调用该对象的setQuery方法
	   同时这2个值也会同步发给dataprocessing更新，此时processor就可以依据当前的role和value，知道IO设备返回的值request是属于哪个role的,
	   然后再把role和request再发回monitor的状态栏,和之前的value比对显示是否设置成功，这是一个闭环
	3. 在没有加入terminal之前，2.的闭环是成功的,只有2类数据，现在加入了terminal。逻辑上是这样的，我将在dataprocessing内规定一个变量
	   它来控制当前操作权正在归属谁，如果monitor的QueryWorker正在使用，调用setQuery方法时就会更新该变量含义为monitor发的消息，
	   否则是terminal的消息，这个变量可以用枚举值设定，以便于以后再有新功能可以switch处理
② 针对①的2和3，在Query增加了控制圈函数，考虑到全局只有1个控制权，1个处理数据的对象，所以还将Query内部相关数据对象全部改为静态对象。
③ 增加了core/enum中的新枚举类型TerminalRole，对应MonitorRole(原来的Role改名)；
   同时升级enum为enum class类型，这样枚举值具有强化的独立作用域不会污染全局枚举值；增加关于TerminalRole的相关信号
④ terminal功能初步完成，并将功能移步至设置菜单下,Settings增加QWidget * statckWidget(int) const函数提供外部堆堆叠界面的访问，
   communication增加currentDevice信号，利用中间人mainwindow连接currentDevice信号和statckWidget函数,将当前设备的指针信息传递给QueryPanel对象
⑤ terminal基本完成，完成双击发送消息-接收消息显示的闭环


2022/12/20：
① 把spic_command.h的枚举类型全部改为enum class类型，并解决产生的
no matching function for call to 'qHash(const SPICCOMAND::SYMbol&)'Q_DECL_NOEXCEPT_EXPR(noexcept(qHash(t)))问题
解决方法是QString作为key,枚举值作为value，应该是原来的enum类型可以隐式转换为整型所以可以作为key，enum class不能隐式转换且qhash没有这样的构造函数才报错
同时注释掉暂时不需要的枚举值变量，减少内存占用
② 解决窗口总是靠前显示的问题，为了方便用户操作，所有窗口都可以通过点击鼠标靠前显示而不是模态显示，另外主窗口关闭事件会关闭所有窗口
③ 由于terminalquery、monitorquery以及fixedquery在data_processing都已经完成了闭环，也就是2022/12/19的①完成，所以可以继续解决日志的问题
   之前的日志是借助多个变量以及函数，并借助各种信号反射实现的，逻辑比较复杂，现在打算构造一个日志管理类，统一管理3+1类数据（1是指可能的信息丢包）
   用户需要保存什么数据就可以保存什么数据，这都由日志管理类统一实现，便于维护。
④ 对于③首先去除了之前所有关于log的逻辑，包括tableview的log，communication的log，将表格功能和日志的耦合分开。
⑤ 考虑到terminal的闭环，其实角色本身没有什么用。monitor其实本质上也没什么用，role仅仅是用来翻译成命令，而terminal不需要翻译，双击项就拿到了命令
   另外monitor的role也是用于监控状态栏对设定信息的一个描述，例如设定源电压成功或者失败，但是不要这个功能也是可以的。terminal就不需要这些功能，role仅仅
   是为了验证逻辑是否闭环，既然已验证闭环，就不要携带多余的role信息，因为role最后还要翻译成字符串作为表格的表头，由于terminal多达188个命令
   所以不会为此设置188个枚举值，然后提供一个函数再翻译，直接使用项信息也就是命令本身作为字段即可，避免脱裤子放屁的操作
⑥ 初步完成Log类的功能编写


2022/12/21：
① 把workMode对话框美化一下，只有2个radioButton在那么空旷的界面确实有点难看，但是也没什么可以加的，昨天梦见可以加个QLabel
   QLabel可以放图片，也可以放在QGroupBox就布局好看一些
② 把不用的图片资源进行清理，同时考虑到自带的消息对话框比较丑，决定自定义消息对话框，其他任何类型的对话框都可以继承这个消息对话框。
   消息对话框的功能，设置对话框的图标和标题，文字的图标和标题，以及按钮等，代码在在messagebox文件夹

2022/12/23：
① 继续完成自定义消息对话框的内容，使用css表美化边框、间距、文字颜色等
② 定义错误对话框、提示对话框、警告对话框继承自消息对话框，以及小提示对话框(只有文字和1个按钮)
③ 完成所有使用Qt对话框的替换，并解决产生对应的问题
④ 解决表格导入导出并行计算异常退出的问题
⑤ 合并一些代码到一个文件更简洁

2022/12/24:
① 日志是否全局启用的功能，还是不放在settings，只有一个checkbox组件也很难看，可以加在通讯界面的右下角，因为这个对话框本身也不大
    而且符合用户习惯，用户点击通讯选择usb还是tcp的时候就可以勾选是否启用，比较方便
② 根据②的功能，连接好Log对象和通讯对话框的信号传递，把用户的设置传递给Log，内部进行判断，就可以实现启用和不使用日志功能



2022/12/26:
① 提示对话框增加不再提示的功能，表格的自定义对话框全部替换完毕，并解决了出现的问题
② 基本完成日志对三类数据的存储功能，通过自测，支持csv/txt的导出
③ 增加一个计数变量，确保回复和收到的次数一致性，如果是设置性但非查询性质的命令，是没有回复的，这样需要计数变量来确保对应
④ 增加小功能，让terminal面板的命令和回复的文字颜色不同，增加用户体验
⑤ disconnect之后，通知用户保存的日志路径，可以选择不再提示

-----------------------------------------------------------------------------------

2023/01/04：

① 迁徙表格功能从"设置"到"高级"下，独立的功能不放在"设置"，相应的tableview.h/cpp也从table移动到tool文件夹下
② 完成"高级"对话框的布局，并绑定好按钮和表格功能，点击按钮启动表格窗口
③ 初步完成绘图窗口的布局，左边是表，用于导入数据；右边是分页视图，有不同的页，每页是一个窗口，目前让折线图、散点图、直方图和饼图占位
④ 暂时搁置绘图窗口的布局，开始折线图窗口的布局，左半部分显示图，右半部分是各种关于图/曲线/图例等各种相关设置的工具箱，顶部是3个动作触发
出现的问题：
QWaitCondition: Destroyed while threads are still waiting
assert: "size == 0 || offset < 0 || size_t(offset) >= sizeof(qarraydata)

2023/01/05：
① 增加了图表数据生成类ChartDataGenerator，可以方便的返回随机序列、一些特定坐标轴，生成数据的代码放在这好维护
② 增加了ChartBar，考虑到每种图都会有个工具条，都有3个动作触发(还可添加更多动作)，为了减少冗余代码写成一个类被调用
③ 增加了Chart，继承QChart，并增加一些特性，同时设置好默认的属性，比默认的表美观，减少初始化的冗余代码
④ 增加了ChartView，继承QChartView，完成了鼠标、键盘可以缩放图的大小的功能，同时还可以用鼠标拖动表
⑤ 增加了ChartToolWidget实现工具页，每种表的工具栏的具体工具是不同的，这个灵活性将会以接口的形式给外部展现
⑥ 增加了ChartTool，使用上述的ChartToolWidget工具页，默认具有3个工具页：曲线、图表和坐标轴设置，故内部有3个工具页指针
ChartToolBox实现这种布局关系后，并提供适当的接口给子类，然后他的子类，例如折线图的工具类是LineChartTool，
可以使用接口给布局添加多个QGroupBox，每个QGroupBox都有一些功能。
这里解决了动态添加QGroupBox后但是工具栏的布局没有显示的问题，发现是工具栏的滚动区域QScrollArea的文档明确说明setWidget只能设置一次
也就是说必须完成全部布局，最后设置布局所在的部件。如果布局实现创建了2个盒子，设置后再添加1个盒子，这个盒子不会显示
所以解决方案就是ChartTool提供一个接口，接口函数内部调用QScrollArea.setWidget，这个接口用于外部动态添加完盒子后最后调用
⑦ 增加了子类LineChartTool，明天将全力完成这个子类的功能，也就是折线图的工具栏


2023/01/06：
① 解决了图和工具栏的比例不协调问题，使其比例4：1比较美观，用户也可以通过分割条调整比例
② 增加ChartSetting类，继承自 QVBoxLayout。考虑到关于图表的工具页布局基本是相同的(共同基类都是Chart)，所以将这部分布局写成一个单独的类减少冗余
这个类将充分发掘QChart可设置的功能和属性，使其尽可能完善丰富。曲线和坐标轴工具页根据曲线类型是不同的，则由子类灵活实现。
③ 解决"QLayout: Attempting to add QLayout "" to ChartToolBox "", which already has a layout"问题
并非代码问题，而是ChartToolBox继承自QVBoxLayout，追溯继承自QLayout直到QLayoutItem，但是却不能被这两个顶级父类初始化，只能被QWidget初始化
然鹅QWidget是自带布局的，所以才会弹出这个东西，既然不能用父类初始化，那就不提供父容器，构造函数去除这个父类初始化的参数即可，问题解决
④ 完成LineChartTool的"标题"、"边距"、"动画"，和"图例"的部分功能



2023/01/09：
① 解决"pure virtual method called QWaitCondition: Destroyed while threads are still waiting terminate called without an active exception"问题
将图例标记设置函数legend()->setMarkerShape(QLegend::MarkerShapeFromSeries);
从选项QLegend::MarkerShapeFromSeries改为QLegend::MarkerShapeRectangle，fromSeries初始化的时候还没有addSeries所以导致异常，所以默认选项不能是这个
② 把绘图窗口的主布局从grid改为splitter，更灵活，同时设置好tableview和tabwidget的最小宽度，拉动分割条不变形
③ 分隔文件类型分别属于chart、charttool、chartview和chartsetting四个文件夹
其中charttool是工具箱继承QToolBox的代码文件；chartsetting是具体的工具布局，继承QGroupBox
④ 为了解决字体对话框和颜色对话框的图标问题，构造函数增加图标参数，这样可以让其和属于的QToolWidget小部件的图标一致
⑤ 把内部的关于多个QGroupBox的初始化函数都写成类，比较好维护
即initTitleBoxLayout()、initMarginBoxLayout()、initAnimationBoxLayout()、initLegendBoxLayout()改成4个类
ChartTilte、ChartMargin、ChartAnimation和ChartLegend，并新增ChartBackground类，内部含有2个子类BackgroundBorder和BackgroundArea
⑥ 新增BackgroundBorder类，完成图表背景边框设置的功能即边框的线型、线宽、颜色、端点样式、连接样式和画刷样式，
⑦ 新增BackgroundArea类是背景区域设置工具栏，有圆角尺寸，边界粒度以及渐变基本/高级参数的设置，明日继续完成背景区域的颜色填充和渐变填充功能
其中渐变填充专门使用BackgroundAreaGradient类实现

2023/01/10：
① 新增BackgroundAreaGradient类，用于背景区域的渐变填充，内部含有基本参数和高级参数设置，高级参数设置有3类，线性、径向和锥形渐变
其中高级参数的有关设置分别使用3个类实现，分别是LinearGradientParamWidget、RadialGradientParamWidget、ConicalGradientParamWidget
它们的共同基类是GradientParamWidget，下边依次介绍这4个类
② 新增GradientParamWidget类，是线性、渐变和锥形渐变的共同基类，统一定义了垂直布局，定义了给用户理解含义的渐变参数描述文本和一个确定按钮
③ 新增ColorButton类，是一个重载QPushButton的类，它将有一个颜色属性，其形状是圆形的而非默认的矩形，颜色属性决定按钮的背景颜色
④ 新增LinearGradientParamSelector类，是一个包含QLabel和ColorButton的颜色选择器类，用于线性渐变高级参数设置方便使用的部件
⑤ 新增LinearGradientParamSelectorWidget类，这个类内部包含11个GradientLinearParamSelector，用于线性渐变高级参数设置的窗口
⑥ 新增LinearGradientParamWidget类，继承自GradientParamWidget，基本完成其功能
包括信号传递和布局规划，另外新增一个文本输入的可选功能，用户可输入文本来设置自定义的线性渐变间隔颜色对，明日完成



2023/01/11：
① 完成很多类的重命名和文件的改名，使其更符合实际含义，概念清晰，容易体现窗口的父子性，方便查找
② 完成全部LinearGradientParamWidget的功能，也就是背景的线性渐变填充功能，并新增设置渐变插值模式的功能
③ 新增ForegroundArea、ForegroundBorder和ChartForeground类，完成前景的有关功能
④ 图表设置功能只剩下径向和锥形渐变的功能了，后续将继续完成

2023/01/12：
① 整理有关渐变填充的笔记，注意到存在的共性，所以将LinearGradientParamSelector类名改为GradientParamSelector，
相应的LinearGradientParamSelectorWidget也改名GradientParamSelectorWidget，这2个类其实3种渐变类型都可以用，所以去掉Linear的前缀
② 新增RadialGradientParamWidget类，完成径向填充的高级参数设置功能
③ 新增ConicalGradientParamWidget类，完成锥形填充的高级参数设置功能
④ BackgroundArea新增initGradientDefaultParams()函数，这是为了渐变填充有个默认的背景
⑤ colorBtn和gradientBtn的槽函数中增加切换上次设置的背景的功能，最初则使用提供的默认背景
颜色填充的默认背景设置：mChart->setBackgroundBrush(QBrush(QColor("#0776a9"),Qt::DiagCrossPattern)); chart.cpp设定过
渐变填充的默认背景设置：其配置情况默认的11个step值，从0.0到1.0的颜色为：
QColor("#0776a9")、QColor("#FFC0CB")、Qt::red、QColor(255,165,0,255)、QColor("#FFFF00")
QColor("#90EE90")、Qt::green、Qt::cyan、QColor("#6A5ACD")、Qt::blue << QColor("#800080")
径向填充的额外参数设置：不提供focal-radius和radius，因为radius=center-radius，focal-radius则是不可预测非线性，所以不提供
提供的是center、focal和center-radius，默认值依次(0,0),(0,0)和1.0
锥形填充的额外参数设置：提供center和angle，默认(0,0)和0.0
⑥ 至今图表设置工具栏的全部功能完成，即chartsettings下的功能，明天会对legend研究一下图例形状有没有可利用的丰富的功能

2023/01/13：
① 解决用户正在设置的渐变类型参数和当前选择的渐变类型不一致出现的背景设置混乱问题。
渐变参数的更新只能由pushbutton点击确定完成，所以增加1个变量确定是否为pushbutton发出的即可
如果是pushbutton发出的，直接更新参数并emit gradientTypeChanged()重设背景；
如果不是，说明是spinbox发出的，此时又分为2种情况：
	无论用户是否选择参数调整可视化，spinbox是没有最终的参数更新决定权的，不要改变原有的真正参数mLinearGradient等，
		只是为了反馈效果，要落实需要点击pushbutton
	所以如果选择参数调整可视化，直接调用setBackgroundBrush函数即可，而不是emit gradientTypeChanged();
	如果没有选择参数调整可视化，什么也不做，不反馈效果也不改变参数，相当于没有这个功能
② 新增GradientParamSpinBox类，重载wheelEvent事件，实现超过最大值就变成最小值，小于最小值就变成最大值的倒退效果，以及一些默认设置例如单步1精度0居中等
③ 渐变参数的QComboBox在选择渐变类型这里信号绑定改用activated信号而非currentIndexChanged信号，区别是单击组合框就会发出信号而不是等到值改变才发出
   这样方便在参数调整可视化后，点击当前下拉框就能更新，例如选择Radial，在参数可视化更改了颜色，组合框只需要再次点击Radial即可变为原有颜色
   否则还需要切到Linear或者Conical再切回Radial才能更新
④ 解决切换颜色填充，渐变填充的窗口没关闭的问题，增加closeChildrenWindows()函数
⑤ GradientParamSelector增加setGrayStyle()和setDefaultStyle()函数，用于使能禁止时的风格变成灰色
⑥ 增加ChartLegend关于手动调整位置的功能，即mChart->legend()->setGeometry(mLegendGeometry);
⑦ 好的Qt文档案例，学习其中有用的知识
Model Data Example（重载QAbstractModel并使用了高级技术QVXYModelMapper）
Multiple Axes Example（多轴图表的创建方法）
ScatterChart Example （ QPainterPath绘制path，QImage创建mask，让painter和mask关联，之后painter.drawPath(path)，mask就画好了，
mask可以当成brush使用，让series设置brush就可以得到自定义的图例形状）
Painter Paths Example （ QPainterPath绘制不同形状的图案的案例）
Legend Example（使用图例的案例）
LegendMarkers Example（使用图例控制显示曲线，利用clicked信号设置曲线的visibility即可）
DateTimeAxis Example （时间轴，借助QDateTimeAxis实现坐标轴，series要添加的x数据是QDateTime::toMSecsSinceEpoch() ）
Callout Example（鼠标点击和悬停事件得到一个点的坐标注释）

2023/01/16：
① 增加了图例控制曲线显示的效果，参考案例LegendMarkers Example
② 图表增加了2个坐标显示的项QGraphicsSimpleTextItem，可以根据鼠标的移动实时显示位置，出现resizeEvent事件也可自动调整位置
③ 利用曲线的悬停事件来显示当前点的坐标，connect(series, &QLineSeries::hovered, this, &LineChart::showToolTip);
悬停效果利用QGraphicsSimpleTextItem来实现
④ 解决no member named 'staticMetaObject' in 'QGraphicsItem'问题，必须同时继承QObject和QGraphicsItem，且QObject放第1个
⑤ ChartBar增加截图功能，完成了全屏截图小功能，明天继续绘图区域截图

2023/01/17：
① 增加了QGraphicsRectItem来实现悬停时的矩形，矩形将文字包裹
② 完成所有截图功能，将ChartBar的构造函数更改，传递chartview而不是chart，这样可以把绘图区域的大小也就是chartview的大小传递进去截图
③ 参考ScatterChart Example绘制五角星，把返回的五角星图案作为函数添加到ChartDataGenerator类备用
④ 增加AxisSetting类用于添加坐标轴设置的各类功能，类似ChartSetting，用于开发QAbstractAxis所具备的所有功能
⑤ 增加AxisInfo类，用于显示坐标轴的visible,alignment,orientation,type共4个信息
⑥ 增加LineAxisSetting类，继承自AxisSetting，用于折线图使用的轴设置
⑦ 增加AxisRange类，同的轴设置范围的方式不同,需要重载，提供了一个垂直布局供子类使用，例如2个子类ValueAxisRange和LogAxisRange，
关于AxisRange及其子类的开发放在最后
⑧ 增加AxisTitle类，完成轴标题的有关设置，即visible,text,brush,font
⑨ 增加AxisLabel类，完成轴标签的有关设置，即visible,color,brush,font,angle



2023/01/18：
① 增加AxisShade类，完成轴阴影的相关功能设置，即visible，bordercolor，borderwidth，areacolor，areastyle
② 增加AxisLine类，完成轴线的功能，即visible，color和width，解决了No such slot AxisBox::changePenWidth(int)
忘了添加Q_OBJECT宏导致只能搜索父类,父类也没有就出现报错
③ 增加AxisGrid类，完成网格线的功能，包括主网格和次网格（次网格仅适用于支持次网格线的轴，例如对数坐标轴），功能为visible，color和width
④ AxisInfo增加轴翻转的功能
⑤ 缕清如何根据当前轴的类型去切换工具栏的布局，可以利用hide和show实现

2023/01/19：
① 增加AxisValue类，不继承AxisBox，完成QValueAxis特有的功能，区别构造函数不再初始化mCurrentAxis因为这个取决于Chart需要切换
② 增加AxisLog类，不继承AxisBox，完成QLogValueAxis特有的功能，区别构造函数不再初始化mCurrentAxis因为这个取决于Chart需要切换
③ 在AxisSetting中，增加对radiobutton切换XY轴时对mCurrentAxis的类型判断，只要是value就用value布局，是log就用log布局
区别只是在setCurrentAxis被调用后才会初始化布局真正的功能信号槽连接，因为那个时候才知道mCurrentAxis是谁且符合要求



2023/01/29：
① 增加TableViewModel类，实现表格和图表的数据-曲线映射功能
② 增加AssociateTable类，用于用户设置曲线如何关联表格
③ 增加信号函数tableChanged,当用户关联表格后，把该消息通知给ChartBar和LineChartTool

2023/01/30：
① 完成tableChanged信号的传递，在LineChart内部直接通知给LineChartTool
LineChartTool内部的ChartSetting无需通知与其无关，AxisSetting和SeriesSetting需要通知，由于曲线的变化轴也会变化
由于mChart的实际地址也就是指针并没有变化，只是其内容(曲线/轴)变化但是界面没跟上而已,界面跟上就切换下轴自动会更新了
② 完成单映射函数void AssociateTable::singleMapping()
TableViewModel类增加colData()函数和tagYColumn()函数用于获取指定列的数据以及标记指定列的背景颜色，用于表格和曲线的颜色映射
③ 完成void AssociateTable::doubleMapping()函数
TableViewModel类增加tagXYColumn()函数用于对选择的2列数据进行映射
④ 完成之前开发功能的英文界面翻译，纠正部分错误
⑤ 出具一份文档，对目前开发的上位机功能的简单介绍

2023/01/31：
① 增加SeriesBox类，和AxisBox、ChartBox功能类似
② 增加SeriesInfo类，继承SeriesBox，为曲线的通用功能
③ 增加SeriesLine类，特定曲线QValueSeries类型的功能
④ 增加SeriesSetting类，内部组合了SeriesInfo类
⑤ 增加LineSeriesSetting类，内部组合了SeriesSetting和SeriesLine，组成折线图具备的曲线设置功能
⑥ 考虑到反复添加曲线后必然有重复的颜色，所以放弃表格颜色和图表映射的问题，干脆每次都清除掉以前所有的颜色
⑦ 解决图表添加新的曲线后就会导致原有的曲线点击图例显示隐藏效果失灵问题
⑧ 明日要解决曲线颜色修改后更新搭配表格的对应列上这个问题

2023/2/1：
① 解决表格颜色和图表颜色映射在重复添加曲线时出现的颜色不起作用或者不匹配的问题
解决方式是：mapping不使用<color,rect>的方式，插入也不使用insertMulti；而是改用<int,color>的方式
每个单元格对应唯一的颜色，如果重复插入覆盖处理，每个单元格的标识符是int，确定方式是10(row+1)+col+1的方式
这样每个单元格会生成11,12,...,1n以及21,31,...,n1这样的唯一标识符可以作为键值
② SeriesLine增加移除单个曲线的功能，并让SeriesSetting的Combo响应界面变化
③ ChartBar增加清空所有曲线包括坐标轴的功能，并让SeriesSetting的Combo响应界面变化
④ ChartViewWidget导入表格文件时清除上次的表格颜色以及调用ChartBar的清空功能，并让SeriesSetting的Combo响应界面变化
⑤ 解决更改曲线颜色后，表格颜色也改变的反向映射问题，这样实现表格<=>曲线的双向颜色映射控制
解决方法是更改曲线颜色后，把更改的这个曲线指针整个传递，而在最初初始化时就会使用哈希变量保存与曲线指针作对应的表格两列编号
关联表格创建的曲线也是如此保存，这样一开始表格到曲线正向映射时保存了曲线和表格列数据的对应关系，那么曲线颜色改变后就可以通过改变的曲线
来实现找回原有的映射列，再调用model的方法就可以实现对表格的映射列重新映射
⑥ 完成移除曲线时也让表格对应的映射列单元格变为白色
⑦ 明日继续增加AssociateTable设置坐标轴类型的功能

2023/2/2：
① 增加AssociateMode类，用于提取出关联模式的布局，减少AssociateTable的代码量
② 增加AssociateSeries类，用于提取出曲线颜色和宽度的设置，减少AssociateTable的代码量
③ 增加ChartShowTip类，提取出显示曲线点坐标的功能，减少AssociateTable的代码量
④ 增加ChartShowLegend类，通过点击图例实现曲线隐藏和显示的功能，减少AssociateTable的代码量
⑤ 增加AssociateAxis类，用于完成2/1的⑦内容，继承QGroupBox用于设置坐标轴类型
⑥ 完成AssociateAxis的线性和对数坐标轴的内容，时间坐标轴需要在axissetting文件夹增加对时间坐标轴有关设置的支持
这是明日的工作

2023/2/3：
① 缕清绘图模块的架构逻辑，绘制流程图完毕
② 缕清绘图模块的同步逻辑，绘制流程图完毕
③ 时间坐标轴的支持下周进行


2023/2/6：
① 增加AxisTime类，增加对时间坐标轴的支持
② axissetting根据时间坐标轴修改代码，增加对value、log和time切换的支持
③ AssociateTable根据时间坐标轴修改代码，增加对时间坐标轴的支持
④ 仿照折线图，新增ScatterChart、ScatterChartTool、ScatterSeriesSetting、SeriesScatter类
⑤ 将原来的SeriesLine改名为SeriesXY，SeriesXY可以用于折线图和散点图，而散点图除了SeriesXY提到的设置还需要加入SeriesScatter
在ScatterSeriesSetting进行组合
⑥ AssociateTable类名去掉，改为使用LineAssociateTable，并增加ScatterAssociateTable
⑦ ChartBar进行修改，改为基类，增加LineChartBar和ScatterChartBar类
⑧ AssociateSeries增加对散点图Marker的尺寸设置支持
⑨ 明日研究时间序列的支持，就可以用上时间坐标轴的支持，折线图和散点图使用不了时间轴，画不出来


2023/2/7：
① 增加BarChart类用于绘制直方图
② 增加BarChartBar、BarAssociateTable类和柱状图进行配套
③ 修改AssociateSeries为AssociateXYSeries，AssociateMode改为AssociateXYMode，AssociateAxis为AssociateXYAxis，针对散点图和折线图的曲线关联设置
④ ChartShowLegend增加对柱状图的支持
⑤ 增加AssociateBarSeries类，用于设置柱状图的颜色和柱宽；
⑥ 增加AssociateBarAxis类，用于设置柱状图的2个轴，水平轴自动根据行列名称生成，垂直轴支持线性和对数
⑦ 如何解决model的数据插入后响应的问题

2023/2/8：
① 解决导入文件表格不更新数据的问题，需要在clear函数使用提供的接口beginResetModel();
然后清除数据mData，之后外部添加行调用beginInsertRows(QModelIndex(),mData.count(),mData.count()+1)和endInsertRows()可以实现反复追加行
最后调用update，内部更新mRowCount、mColumnCount和mHorizontalHeader、mVerticalHeader
② 增加TableViewModel对QAbstractTableModel提供的接口函数的重载，支持添加和插入空白行和空白列
③ AssociateBarMode除了行、列映射还增加区域映射模式的支持，需要指定起始列和终止列，起始行和行数
⑥ 相应的BarAssociateTable增加对区域映射的支持
⑦ 增加BarChartTool类，用于柱状图的工具栏
⑧ 增加AxisBarCategory类，用于柱状图横轴有关设置的支持，并在AxisSetting中修改代码增加其支持
⑨ 明日应增加对柱状图曲线的有关设置支持，即曲线工具栏

2023/2/9：
① AssociateBarMode进一步将区域模式拆分成水平区域和垂直区域模式
② 解决滚动区域小部件互相挤压的问题，改用使能禁止代替hide和show
③ 增加BarSeriesSetting类，不使用通用设置，只使用seriesinfo，因为柱状图特殊无需切换和移除曲线
④ 增加SeriesBar类，对柱状图曲线的有关支持
⑤ 增加SeriesBarSet类，用于对柱状图曲线的不同类别的柱子颜色，求和进行设置和显示
⑥ 完成行列模式柱状图某个系列颜色改变然后让表格重映射对应列的逻辑
void BarAssociateTable::onSeriesColorChanged(QBarSeries*series,QColor color, int flag)
明日继续完成行列区域模式的映射

2023/2/10：
① 完成行、列、行区域、列区域颜色反向映射表格的问题，并解决首行/首列更改导致的异常，是因为颜色的索引越界导致的
② 解决"ASSERT: "width > 0.0" in file painting\qrasterizer.cpp, line 761"的问题
原因是直方图绘制某个系列时，如果这列的数据全部是0，或者全部是字符(toDouble也变成0)，这个系列绘制就没有意义，因为每个类别都是0就导致整体系列宽度是0
所以解决办法是：
开始绘制之前检测是否所有数据有效，也即是是否为空表，空表不能绘制；
对于行或者列模式，可以事先检测取到的行/列数据是否有效，空行或者空列不能绘制；
对于行或者列区域模式，也要事先检测该区域是否不为空，空区域也不能绘制；
为此在TableViewModel类内增加了以下10个函数用于检测。
qreal dataSummary(const QVector<QVariant>&) const;
bool isRowDataValid(int) const;
bool isColumnDataValid(int) const;
bool isRowRegionDataValid(int,int,int,int) const;
bool isColRegionDataValid(int,int,int,int) const;
bool isAllDataValid() const;
QVector<QVariant> rowData(int) const;
QVector<QVariant> rowData(int,int,int) const;
QVector<QVariant> colData(int) const;
QVector<QVariant> colData(int,int,int) const;
③ 柱状图的流程图绘制完毕，下周继续开发饼图和时间序列的图

2023/2/11：
① 迁徙工程从qtcreator到visual studio，移除不必要的文件夹csv,test等
② 增加PieChart类主窗口
③ 增加PieChartTool 饼图工具栏
④ 增加PieChartBar 饼图工具条
⑤ 增加SeriesPie 饼图曲线设置
⑥ 增加SeriesPieSlice 饼图系列设置
⑦ 增加PieSeriesSetting 饼图的工具栏设置（饼图没有轴，无需轴设置）







































